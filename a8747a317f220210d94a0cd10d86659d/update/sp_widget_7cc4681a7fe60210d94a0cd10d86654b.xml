<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope) {
	/* widget controller */
	var c = this;
	c.submitBtnText = "Submit";
	c.cancelBtnText = "Cancel";
	c.expenseObj = {};
	c.expenseObj.amount = 0;
	c.expenseObj.memberList = [];
	c.onSplitEqualChanged = function(){
		c.splitAmount();
	};
	
	c.onAmountBlur = function()
	{
		c.expenseObj.amount = parseFloat(c.expenseObj.amount).toFixed(2);
	}
	c.splitAmount = function()
	{
		if(c.splitEqually && c.expenseObj.memberList) 
		{
			var splitAmount = parseFloat(c.expenseObj.amount/c.expenseObj.memberList.length);
			for(var i=0;i<c.expenseObj.memberList.length;++i)
				c.expenseObj.memberList[i].amount = splitAmount.toFixed(2);
		}
		c.checkInputValidity();
	};
	c.onAmountChanged = function()
	{
		c.splitAmount();
	};
	c.onSubmit = function(){
		c.server.get({
			action: c.expenseObj.expense_id == -1?'createExpense': 'updateExpense',
			expense:c.expenseObj
		}).then(function(response){
			$scope.$parent.$parent.buttonClicked({ primary: true, success: response.data.result.success});
			$rootScope.$emit('expenseUpdated',c.expenseObj.expense_id);
		});
	};
	c.onCancel = function()
	{
		c.clearFormValues();
		$scope.$parent.$parent.buttonClicked({ cancel: true });
	};
	c.checkInputValidity = function()
	{
		if(c.isSumValid() && c.expenseObj && c.expenseObj.paidBy && c.expenseObj.amount > 0 && c.expenseObj.expenseName)
			c.areInputsValid = true;
		else
			c.areInputsValid = false;
	}
	c.isSumValid = function()
	{
		if(!c.expenseObj.memberList) return false;
		c.expenseObj.errorMsg = "";
		if(c.expenseObj.amount < 0)
		{
			c.expenseObj.errorMsg = "Amount cannot be negative";
			return false;
		}
		var sum = 0;
		for(var i=0;i<c.expenseObj.memberList.length;++i)
		{
			if(c.expenseObj.memberList[i].amount < 0)
			{
				c.expenseObj.errorMsg = "Amount cannot be negative";
				return false;
			}
			sum += c.expenseObj.memberList[i].amount?
				parseFloat(c.expenseObj.memberList[i].amount) : 0;
		}
		if(sum!=parseFloat(c.expenseObj.amount))
		{
			var diff = parseFloat(c.expenseObj.amount - sum).toFixed(2);
			if(Math.abs(diff)<0.1) return true;
			if(diff > 0)
				c.expenseObj.errorMsg = "Amount of Rs."+diff +" left to adjust";
			else if(diff < 0)
				c.expenseObj.errorMsg = "Amount of -Rs."+(-diff)+" left to adjust";
			return false;
		}
		else
		{
			c.expenseObj.errorMsg = "";
			return true;
		}	
	};
	c.clearFormValues = function(){
		c.expenseObj.paidBy = scope.user.sys_id;
		c.expenseObj.amount = 0;
		c.expenseObj.expenseName = '';
		c.splitEqually = true;
		c.areInputsValid = false;
		if(c.expenseObj.memberList)
		{
			for(var i=0;i<c.expenseObj.memberList.length;++i)
				c.expenseObj.memberList[i].amount = 0;
		}
		else
			c.expenseObj.memberList = [];
	};
	if($scope.options && $scope.options.shared)
	{	
		$scope.options.shared.result = c.expenseObj;
		if($scope.options.shared.action=="openExisting")
		{
			var widgetData = $scope.options.shared.selectedExpense;
			if(widgetData.expense_name)
				c.expenseObj.expenseName = widgetData.expense_name;
			if(widgetData.paid_by_id)
				c.expenseObj.paidBy = widgetData.paid_by_id;
			if(widgetData.total_amount)
				c.expenseObj.amount = parseFloat(widgetData.total_amount);
			c.expenseObj.group_id = $scope.options.shared.group_id;
			c.expenseObj.expense_id = widgetData.sys_id;

			c.server.get({
				action:'getExpenseData',
				group_id:c.expenseObj.group_id,
				expense_id:c.expenseObj.expense_id
			}).then(function(result){
				c.expenseObj.memberList = result.data.memberList;
			});
			c.submitBtnText = "Update";
			c.cancelBtnText = "Close";
			c.areInputsValid = true;
		}
		else if($scope.options.shared.action=="createNew")
		{
			c.expenseObj.group_id = $scope.options.shared.group_id;
			c.clearFormValues();
			c.server.get({
				action:'getGroupMembers',
				group_id:c.expenseObj.group_id
			}).then(function(result){
				c.expenseObj.memberList = result.data.memberList;
			});
			c.submitBtnText = "Create Expense";
			c.cancelBtnText = "Cancel";
			c.expenseObj.expense_id=-1;
		}
	}
	else
		c.clearFormValues();
};]]></client_script>
        <controller_as>c</controller_as>
        <css>#parentBody
{
  margin:10px;
}
td,th, font{
  padding:5px;
}
table
{
  margin:15px 0px;
}
.checkboxStyle
{
  margin:0px 5px 0px 0px;
}
.expenseInput,th
{
  width:200px;
  height:25px;
}
.dialogButton
{
  margin:0 0px 0 10px;
}
.buttonContainer{
  margin-top:40px;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data>{
	"data":{
		"memberList":[
			{
				"sys_id":1,
				"name":"Darshana Suresh",
				"amount":0
			}
		]
	}
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>add_expense_form</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Add expense form</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	var getExpenseData = function(expense_id,group_id)
	{
		getGroupMembers(group_id);
		var memberAmounts = getExpenseDist(expense_id,group_id);
		if(data.memberList && memberAmounts)
		{
			for(var i=0;i<data.memberList.length;++i)
			{
				if(memberAmounts[data.memberList[i].sys_id])
				{
					data.memberList[i].amount = parseFloat(memberAmounts[data.memberList[i].sys_id].amount_owed).toFixed(2);
					data.memberList[i].dist_id = memberAmounts[data.memberList[i].sys_id].sys_id;
				}
				else
					data.memberList[i].amount = 0.00;
			}
		}
	}
	var getGroupMembers = function(group_id){
		data.memberList = [];
		var gr = new GlideRecord('sn_splitwise_group');
		gr.addQuery('sys_id',group_id);
		gr.query();
		var groupMember = {};
		if(gr.next())
		{
			$sp.getRecordValues(groupMember, gr, 'sys_id,name,members');
		}

		gr = new GlideRecord('sys_user');
		gr.addQuery('sys_id','IN',groupMember.members);
		gr.query();
		while(gr.next())
		{
			var memberDetails = {};
			$sp.getRecordDisplayValues(memberDetails, gr, 'sys_id,name');
			memberDetails.amount = 0.00;
			data.memberList.push(memberDetails);
		}
	};
	var getExpenseDist = function(expense_id,group_id)
	{
		var gr = new GlideRecord('sn_splitwise_expense_distribution');
		gr.addQuery('expense_id',expense_id);
		gr.addQuery('group_id',group_id);
		gr.query();
		var memberAmounts = {},resObj;
		while(gr.next())
		{
			resObj = {};
			$sp.getRecordValues(resObj, gr, 'sys_id,member,amount_owed');
			memberAmounts[resObj.member] = resObj;
		}
		return memberAmounts;
	}
	var createExpense = function(expense)
	{
		var newGr = new GlideRecord('sn_splitwise_expense');
		newGr.initialize();
		newGr.expense_name = expense.expenseName;
		newGr.group_id = expense.group_id;
		newGr.paid_by = expense.paidBy;
		newGr.total_amount = expense.amount;
		//newGr.caller_id.setDisplayValue('Joe Employee');
		var expense_id = newGr.insert();
		data.result.success = expense_id ? true : false;

		if(data.result.success)
		{
			var dist;
			for(var i=0;i<expense.memberList.length;++i)
			{
				if(expense.memberList[i].amount <=0)
					continue;
				dist =  new GlideRecord('sn_splitwise_expense_distribution');
				dist.initialize();
				dist.group_id  = expense.group_id;
				dist.expense_id = expense_id;
				dist.paid_by = expense.paidBy;
				dist.amount_owed = expense.memberList[i].amount;
				dist.member = expense.memberList[i].sys_id;
				var check = dist.insert();
				data.result.success = data.result.success && check? true : false;
			}
		}


	}
	var updateExpense = function(expense)
	{
		var updateGr = new GlideRecord('sn_splitwise_expense');
		updateGr.addQuery('sys_id',expense.expense_id);
		updateGr.query();
		if(updateGr.next())
		{
			updateGr.setValue('paid_by',expense.paidBy);
			updateGr.setValue('expense_name',expense.expenseName);
			updateGr.setValue('total_amount',expense.amount);
			data.result.success = updateGr.update()? true : false;
			console.log("Updated expense "+data);
		}

		var dist;
		for(var i=0;i<expense.memberList.length;++i)
		{
			dist =  new GlideRecord('sn_splitwise_expense_distribution');
			dist.addQuery('sys_id',expense.memberList[i].dist_id);
			dist.query();
			var check;
			if(dist.next())
			{
				console.log("updating dist ");
				dist.setValue('paid_by',expense.paidBy);
				dist.setValue('amount_owed',expense.memberList[i].amount);
				check = dist.update();
				data.result.success = data.result.success && check? true: false;
			}
			else
			{
				dist =  new GlideRecord('sn_splitwise_expense_distribution');
				dist.initialize();
				dist.group_id  = expense.group_id;
				dist.expense_id = expense_id;
				dist.paid_by = expense.paidBy;
				dist.amount_owed = expense.memberList[i].amount;
				dist.member = expense.memberList[i].sys_id;
				check = dist.insert();
				data.result.success = data.result.success && check? true : false;
			}

		}
	}
	if(input)
	{
		data.result = {};
		switch(input.action)
		{
			case 'getExpenseData':
				getExpenseData(input.expense_id,input.group_id);
				break;
			case 'getGroupMembers':
				getGroupMembers(input.group_id);
				break;
			case 'createExpense':
				createExpense(input.expense);
				break;
			case 'updateExpense':
				updateExpense(input.expense);
		}

	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-06-04 13:31:36</sys_created_on>
        <sys_id>7cc4681a7fe60210d94a0cd10d86654b</sys_id>
        <sys_mod_count>420</sys_mod_count>
        <sys_name>Add expense form</sys_name>
        <sys_package display_value="Splitwise" source="sn_splitwise">a8747a317f220210d94a0cd10d86659d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Splitwise">a8747a317f220210d94a0cd10d86659d</sys_scope>
        <sys_update_name>sp_widget_7cc4681a7fe60210d94a0cd10d86654b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-21 12:04:03</sys_updated_on>
        <template><![CDATA[<div id="parentBody">
  <div id="expenseForm">
      <table id="expenseTable">
        <tr>
          <td>
            <label for="expenseName">Expense Name</label>
          </td>
          <td>
            <input type="text" id="expenseName" 
                   ng-model="c.expenseObj.expenseName" ng-change="c.checkInputValidity()"
                   class="expenseInput"><br>
          </td>
        </tr>
        <tr>
          <td>
            <label for="paidBy">Paid by</label>
          </td>
          <td>
            <select ng-model="c.expenseObj.paidBy" class="expenseInput"
                    ng-options='member.sys_id as member.name for member in c.expenseObj.memberList'
                    ng-change="c.checkInputValidity()">
            </select>
          </td>
        </tr>
        <tr>
          <td>
            <label for="amount">Amount (₹)</label>
          </td>
          <td>
            <input ng-model="c.expenseObj.amount" 
                   type="number"
                   id="amount" step="0.01"
                   ng-blur="c.onAmountBlur()"
                   ng-change="c.onAmountChanged()"
                   class="expenseInput"><br>
          </td>
        </tr>
      </table>
      <table id="splittingTable">
        <tr>
          <td>
            <input type="checkbox" id="splitEqual" 
                   ng-model="c.splitEqually" ng-change="c.onSplitEqualChanged()"
                   class="checkboxStyle" ng-disabled="c.areMembersEmpty()">
            <label for="splitEqual" id="splitEqualLabel" class="checkboxLabelStyle">Split equally</label>
          </td>
        </tr>
        <tr>
          <th>Member name</th>
          <th>Amount (₹)</th>
        </tr>
        <tr ng-repeat="x in c.expenseObj.memberList">
          <td>{{x.name}}</td>
          <td>
            <input ng-model="x.amount" 
                 
                   ng-disabled="c.splitEqually"
                   ng-change="c.checkInputValidity()">
          </td>
        </tr>
      </table>

      <font color="red" id="errorMsg">
        {{c.expenseObj.errorMsg}}
      </font>
      <br> 
      <div class="pull-right buttonContainer">
        <button class="btn btn-primary btn-{{options.color}} m-b dialogButton"
                ng-click="c.onSubmit()" 
                ng-disabled="!c.areInputsValid"
                >{{c.submitBtnText}}
        </button>
        <button class="btn btn-{{options.color}} m-b dialogButton btn-secondary"
                ng-click="c.onCancel()">
          {{c.cancelBtnText}}
        </button>
      </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
